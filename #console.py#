#rint("** class doesn't exist **")



    def do_update(self, arg):
        
        """

        Updates an instance based on the class name and

        id by adding or updating attribute

        (save the change into the JSON file).

        Structure: update [class name] [id] [arg_name] [arg_value]

        """
        
        if not arg:
            
            print("** class name missing **")
            
            return
        
        my_data = shlex.split(arg)
        
        storage.reload()
        
        objs_dict = storage.all()
        
        if my_data[0] not in HBNBCommand.my_dict.keys():
            
            print("** class doesn't exist **")
            
            return
        
        if (len(my_data) == 1):
            
            print("** instance id missing **")
            
            return
        
        try:
            
            key = my_data[0] + "." + my_data[1]
            
            objs_dict[key]
            
        except KeyError:
            
            print("** no instance found **")
            
            return
        
        if (len(my_data) == 2):
            
            print("** attribute name missing **")
            
            return
        
        if (len(my_data) == 3):
            
            print("** value missing **")
            
            return
        
        my_instance = objs_dict[key]
        
        if hasattr(my_instance, my_data[2]):
            
            data_type = type(getattr(my_instance, my_data[2]))
            
            setattr(my_instance, my_data[2], data_type(my_data[3]))
            
        else:
            
            setattr(my_instance, my_data[2], my_data[3])
            
        storage.save()
        

        
    def do_update2(self, arg):
        
        """

        Updates an instance based on the class name and

        id by adding or updating attribute

        (save the change into the JSON file).

        Structure: update [class name] [id] [dictionary]

        """
        
        if not arg:
            
            print("** class name missing **")
            
            return
        
        my_dictionary = "{" + arg.split("{")[1]
        
        my_data = shlex.split(arg)
        
        storage.reload()
        
        objs_dict = storage.all()
        
        if my_data[0] not in HBNBCommand.my_dict.keys():
            
            print("** class doesn't exist **")
            
            return
        
        if (len(my_data) == 1):
            
            print("** instance id missing **")
            
            return
        
        try:
            
            key = my_data[0] + "." + my_data[1]
            
            objs_dict[key]
            
        except KeyError:
            
            print("** no instance found **")
            
            return
        
        if (my_dictionary == "{"):
            
            print("** attribute name missing **")
            
            return
        

        
        my_dictionary = my_dictionary.replace("\'", "\"")
        
        my_dictionary = json.loads(my_dictionary)
        
        my_instance = objs_dict[key]
        
        for my_key in my_dictionary:
            
            if hasattr(my_instance, my_key):
                
                data_type = type(getattr(my_instance, my_key))
                
                setattr(my_instance, my_key, my_dictionary[my_key])
                
            else:
                
                setattr(my_instance, my_key, my_dictionary[my_key])
                
        storage.save()
        

        
    def do_count(self, arg):
        
        """

        Counts number of instances of a class

        """
        
        counter = 0
        
        objects_dict = storage.all()
        
        for key in objects_dict:
            
            if (arg in key):
                
                counter += 1
                
        print(counter)
        

        
    def default(self, arg):
        
        """ handle new ways of inputing data """
        
        val_dict = {
            
            "all": self.do_all,
            
            "count": self.do_count,
            
            "show": self.do_show,
            
            "destroy": self.do_destroy,
            
            "update": self.do_update
            
        }
        
        arg = arg.strip()
        
        values = arg.split(".")
        
        if len(values) != 2:
            
            cmd.Cmd.default(self, arg)
            
            return
        
        class_name = values[0]
        
        command = values[1].split("(")[0]
        
        line = ""
        
        if (command == "update" and values[1].split("(")[1][-2] == "}"):
            
            inputs = values[1].split("(")[1].split(",", 1)
            
            inputs[0] = shlex.split(inputs[0])[0]
            
            line = "".join(inputs)[0:-1]
            
            line = class_name + " " + line
            
            self.do_update2(line.strip())
            
            return
        
        try:
            
            inputs = values[1].split("(")[1].split(",")
            
            for num in range(len(inputs)):
                
                if (num != len(inputs) - 1):
                    
                    line = line + " " + shlex.split(inputs[num])[0]
                    
                else:
                    
                    line = line + " " + shlex.split(inputs[num][0:-1])[0]
                    
        except IndexError:
            
            inputs = ""
            
            line = ""
            
        line = class_name + line
        
        if (command in val_dict.keys()):
            
            val_dict[command](line.strip())
            

            

if __name__ == '__main__':
    HBNBCommand().cmdloop()